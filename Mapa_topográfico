
/*@ <answer>
 *
 * Nat
 *
 *@ </answer> */

#include <iostream>
#include <fstream>
//#include <...>
using namespace std;

//#include "..."  // propios o los de las estructuras de datos de clase
const int MAX = 1000;
typedef int tMatriz[MAX][MAX];
tMatriz matriz;//la creo estática xq stack overflow
/*@ <answer>

 Escribe aquí un comentario general sobre la solución, explicando cómo
 se resuelve el problema y cuál es el coste de la solución, en función
 del tamaño del problema.

 @ </answer> */

 // ================================================================
 // Escribe el código completo de tu solución aquí debajo
 // ================================================================
 //@ <answer>

bool resuelveCaso() {

    // leer los datos de la entrada

    // resolver el caso 
    int N, M;//N = num cuadros verticales, M = num cuadros horizontales

    if (!(std::cin >> N >> M)) {
        return false;
    }
    else {
        std::cin >> matriz[0][0]; //leo el primer valor 
        int maxAltura = matriz[0][0]; //inicializo el valor maximo al primero que haya puesto que no puedo poner un valor asumido
        int filaMax = 0, colMax = 0;


       for (int i = 0; i < N; i++) { //filas
           for (int j = 0; j < M; j++) { //columnas
               if (i == 0 && j == 0) continue; //como ya he leido este valor, me lo salto
               std::cin >> matriz[i][j]; //guardo los valores de la matriz

               if (matriz[i][j] > maxAltura) {
                   maxAltura = matriz[i][j];
                   filaMax = i;
                   colMax = j;
               }
           }
       }

       // escribir la solución
       std::cout << maxAltura << " " << filaMax << " " << colMax << endl;
       //archivoSalida << maxAltura << " " << filaMax << " " << colMax << endl;
       return true;
    }
}

//@ </answer>
//  Lo que se escriba dejado de esta línea ya no forma parte de la solución.

int main() {
    // ajustes para que cin extraiga directamente de un fichero
#ifndef DOMJUDGE
    std::ifstream in("casos.txt");
    auto cinbuf = std::cin.rdbuf(in.rdbuf());
#endif

   /*std::ofstream archivoSalida("solucion.txt");
    if (!archivoSalida) {
        std::cerr << "Error al abrir el archivo de salida.\n";
        return 1;
    }*/

    while (resuelveCaso());

    // para dejar todo como estaba al principio
#ifndef DOMJUDGE
    std::cin.rdbuf(cinbuf);
    system("PAUSE");
#endif
    return 0;
}
