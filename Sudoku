#include <iostream>
#include <fstream>
//#include <...>
using namespace std;

//#include "..."  // propios o los de las estructuras de datos de clase
const int NUM = 9;
/*@ <answer>

 Escribe aquí un comentario general sobre la solución, explicando cómo
 se resuelve el problema y cuál es el coste de la solución, en función
 del tamaño del problema.

 @ </answer> */


 // ================================================================
 // Escribe el código completo de tu solución aquí debajo
 // ================================================================
 //@ <answer>

bool esValido(int matriz[NUM][NUM]) {
    // Verificar filas y columnas
    /*
    //solucion con #include <unordered_set>
    for (int i = 0; i < NUM; i++) {
        unordered_set<int> fila, columna;
        for (int j = 0; j < NUM; j++) {
            // Verificar fila
            if (fila.count(matriz[i][j])) return false;
            fila.insert(matriz[i][j]);

            // Verificar columna
            if (columna.count(sudoku[j][i])) return false;
            columna.insert(sudoku[j][i]);
        }
    }

    // Verificar cada subcuadrícula 3x3
    for (int fila = 0; fila < NUM; fila += 3) {
        for (int col = 0; col < NUM; col += 3) {
            unordered_set<int> bloque;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    int num = matriz[fila + i][col + j];
                    if (bloque.count(num)) return false;
                    bloque.insert(num);
                }
            }
        }
    }

    return true;*/

    //matrices para verificar cada parte, inicializados a 0
    int filas[NUM][NUM + 1] = { 0 };
    int columnas[NUM][NUM + 1] = { 0 };
    int regiones[NUM][NUM + 1] = { 0 };

    for (int i = 0; i < NUM; i++) {
        for (int j = 0; j < NUM; j++) {
            int num = matriz[i][j]; //num actual

            //Con esto comprobamos en qué región está
            int region = (i / 3) * 3 + (j / 3);

            //Si hay algun num reetido devuelve false
            if (filas[i][num] || columnas[j][num] || regiones[region][num]) return false;

            //ahora marcamos que ese numero ya está
            filas[i][num] = 1;
            columnas[j][num] = 1;
            regiones[region][num] = 1;
        }
    }
    return true; 

}

void resuelveCaso() {

    // leer los datos de la entrada
    int matriz[NUM][NUM]; //Cada caso de prueba está formado por 9 líneas, cada una con 9 números entre el 1 y el 9
    // resolver el caso posiblemente llamando a otras funciones

    for (int i = 0; i < NUM; i++) {
        for (int j = 0; j < NUM; j++) {
            std::cin >> matriz[i][j];
        }
    }
    // escribir la solución
    if (esValido(matriz)) cout << "SI\n";
    else cout << "NO\n";
}

//@ </answer>
//  Lo que se escriba dejado de esta línea ya no forma parte de la solución.

int main() {
    // ajustes para que cin extraiga directamente de un fichero
#ifndef DOMJUDGE
    std::ifstream in("casos.txt");
    auto cinbuf = std::cin.rdbuf(in.rdbuf());
#endif

    int numCasos;
    std::cin >> numCasos;
    for (int i = 0; i < numCasos; ++i)
        resuelveCaso();

    // para dejar todo como estaba al principio
#ifndef DOMJUDGE
    std::cin.rdbuf(cinbuf);
    system("PAUSE");
#endif
    return 0;
}
